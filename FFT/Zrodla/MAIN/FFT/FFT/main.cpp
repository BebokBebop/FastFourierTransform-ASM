#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <TGUI/TGUI.hpp>
#include <string>
#include <chrono>
#include <thread>
#include "FFT.h"



int main()
{
	sf::RenderWindow window(sf::VideoMode(WIDTH, HEIGHT, 32), "FFT");
	tgui::Gui gui{ window };
	//load GUI from .txt file (generated by tgui builder)
	gui.loadWidgetsFromFile("form.txt");

	//main 
	FFT fft;

	//GUI elements - labels, buttons, etc.
	tgui::TextBox::Ptr speedTextBox = gui.get<tgui::TextBox>("TextBox1");
	tgui::RadioButton::Ptr cppChoice = gui.get<tgui::RadioButton>("RadioButton1");
	tgui::RadioButton::Ptr asmChoice = gui.get<tgui::RadioButton>("RadioButton2");
	tgui::TextBox::Ptr speedTextBox2 = gui.get<tgui::TextBox>("TextBox3");
	tgui::ProgressBar::Ptr progressBar = gui.get<tgui::ProgressBar>("ProgressBar1");
	tgui::Slider::Ptr threadSlider = gui.get<tgui::Slider>("Slider1");
	tgui::Slider::Ptr boostSlider = gui.get<tgui::Slider>("Slider2");
	tgui::TextBox::Ptr threadCount = gui.get<tgui::TextBox>("ThreadNumber");
	threadCount->setText(std::to_string((int)threadSlider->getValue()));

	threadSlider->connect("ValueChanged", [&]() {
		threadCount->setText(std::to_string((int)threadSlider->getValue()));
		fft.setThreadCount((int)threadSlider->getValue());
		});
	boostSlider->connect("ValueChanged", [&]() {
		fft.setBoost(boostSlider->getValue() * boostSlider->getValue() * boostSlider->getValue()); //0.1 - 2.0 
		});
	gui.get<tgui::ComboBox>("ComboBox1")->connect("ItemSelected", [&]() {
		fft.readFile("Dane testowe/" + gui.get<tgui::ComboBox>("ComboBox1")->getSelectedItem() + ".wav", 16384);
		});
	gui.get("PauseButton")->connect("pressed", &FFT::pause, &fft);
	gui.get("PlayButton")->connect("pressed", &FFT::unpause, &fft);
	gui.get("StopButton")->connect("pressed", [&]() {
		fft.stop();
		fft.draw(window);
		});
	cppChoice->connect("Checked", &FFT::setChoice, &fft, 1);
	asmChoice->connect("Checked", &FFT::setChoice, &fft, 0);
	progressBar->setMaximum(1000);
	progressBar->setMinimum(0);

	//max amount of concurrent threads
	unsigned int numThreads = std::thread::hardware_concurrency();
	threadSlider->setValue(numThreads);

	string path;
	//size of the sample
	int bufferSize = 8192 * 2;
	
	//faster debug
	//fft.readFile("Resources/sintra.wav", bufferSize);
	
	std::list<double> averageSpeed(100);
	for (auto aS : averageSpeed) {
		aS = 0.0;
	}

	//main loop
	while (window.isOpen())
	{
		sf::Event event;

		//check if closed
		while (window.pollEvent(event)) {
			if (event.type == sf::Event::Closed)
				window.close();
			gui.handleEvent(event);
		}

		//timer
		auto start = std::chrono::high_resolution_clock::now();
		if (fft.isPlaying()) {
			fft.update(); //includes FFT algorythm
		}
		std::chrono::duration<double> elapsed = std::chrono::high_resolution_clock::now() - start;
		
		speedTextBox->setText(std::to_string(elapsed.count()));
		averageSpeed.push_front(elapsed.count());
		averageSpeed.pop_back();
		double averageSpeed100 = 0.0;
		for (auto aS : averageSpeed) {
			averageSpeed100 += aS;
		}
		averageSpeed100 /= 100.0;
		speedTextBox2->setText(std::to_string(averageSpeed100));

		progressBar->setValue(int(1000.0 * fft.getProgress()));
		window.clear();
		fft.draw(window);
		gui.draw();
		window.display();
	}

	return 0;
}